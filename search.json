[
  {
    "objectID": "posts/kennedi-orr-hasnt-lived-up-to-hype/index.html",
    "href": "posts/kennedi-orr-hasnt-lived-up-to-hype/index.html",
    "title": "Has Kennedi Orr lived up to the hype she set as the #1 recruit in her class?",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\nmatchstats <- read_csv(\"ncaa_womens_volleyball_matchstats_2022.csv\")\nplayerstats <- read_csv(\"ncaa_womens_volleyball_playerstats_2022.csv\")\n\nbigten <- playerstats %>% filter (team == \"Nebraska Cornhuskers\" | team == \"Iowa Hawkeyes\" | team == \"Penn State Nittany Lions\" | team == \"Michigan Wolverines\" | team == \"Michigan State Spartans\" | team == \"Purdue Boilermakers\" | team == \"Wisconsin Badgers\" | team == \"Maryland Terrapins\" | team == \"Rutgers Scarlet Knights\" | team == \"Ohio State Buckeyes\" | team == \"Indiana Hoosiers\" | team == \"Illinois Fighting Illini\" | team == \"Minnesota Golden Gophers\" | team == \"Northwestern Wildcats\")\n\nsetters <- playerstats %>% \n  filter(pos == \"S\") %>% \n  filter(gs > 5) %>% \n  filter(assists > 100)\n  \n\nbigsetters <- setters %>% \n  filter(team == \"Nebraska Cornhuskers\" | team == \"Iowa Hawkeyes\" | team == \"Penn State Nittany Lions\" | team == \"Michigan Wolverines\" | team == \"Michigan State Spartans\" | team == \"Purdue Boilermakers\" | team == \"Wisconsin Badgers\" | team == \"Maryland Terrapins\" | team == \"Rutgers Scarlet Knights\" | team == \"Ohio State Buckeyes\" | team == \"Indiana Hoosiers\" | team == \"Illinois Fighting Illini\" | team == \"Minnesota Golden Gophers\" | team == \"Northwestern Wildcats\") %>%\n  filter(gs > 5) %>% \n  filter(assists > 100)\n\nhuskerplayers <- playerstats %>% filter(team == \"Nebraska Cornhuskers\")\n\nnebraska <- matchstats %>% filter(team == \"Nebraska Cornhuskers\")\n\nbigtenmatches <- matchstats %>% filter(team == \"Nebraska Cornhuskers\" | team == \"Iowa Hawkeyes\" | team == \"Penn State Nittany Lions\" | team == \"Michigan Wolverines\" | team == \"Michigan State Spartans\" | team == \"Purdue Boilermakers\" | team == \"Wisconsin Badgers\" | team == \"Maryland Terrapins\" | team == \"Rutgers Scarlet Knights\" | team == \"Ohio State Buckeyes\" | team == \"Indiana Hoosiers\" | team == \"Illinois Fighting Illini\" | team == \"Minnesota Golden Gophers\" | team == \"Northwestern Wildcats\")\n\nhuskeropponents <- matchstats %>% filter(opponent == \"Nebraska\")\n\norr <- playerstats %>% filter(full_name == \"Kennedi Orr\")\n\nggplot() +\n  geom_point(data=setters, aes(x=assists, y=bhe), color = \"grey\") +\n  geom_smooth(data=setters, aes(x=assists, y=bhe), method=\"lm\", se=FALSE) +\n  geom_point(data=orr, aes(x=assists, y=bhe, label=full_name), color = \"#d00000\", size = 4) +\n  geom_smooth(data=orr, aes(x=assists, y=bhe), method=\"lm\", se=FALSE) +\nlabs(\n    title = \"How does Kennedi Orr stack up against NCAA \\nSetters in terms of assists:errors ratio?\",\n    subtitle = \"Once again, all of these setters have started over 5 games and have over 100 assists, \\nand Kennedi Orr is on the left, with not as many assists and quite a few errors.\\n(The blue line is the average)\",\n    x = \"Assists\",\n    y = \"Ball Handling Errors\",\n    caption = \"NCAA | Paige Trutna\"\n    ) +\ntheme_minimal() +\ntheme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 10), \n    plot.subtitle = element_text(size=10.5), \n    panel.grid.minor = element_blank(),\n    axis.text.x = element_text(size = 10),\n    plot.title.position = \"plot\"\n    ) \n\n\n\n\n\nNext, let’s look at just her ball-handling errors, and how they compare to the rest of the Big Ten setters. Orr has 17 ball-handling errors…while only setting in half of the rotations. She split time with Anni Evans. The Big Ten setter with the second-highest number of ball handling errors is Lauren DeLo, who plays for Rutgers – she has 10. But on the other hand, she has 541 assists. That puts her ratio at one ball-handling error to every 54.1 assists. Significantly better than Orr’s.\n\n\nCode\nggplot() + \n  geom_bar(data=bigsetters, aes(x=reorder(full_name, bhe), weight=bhe)) +\n  geom_bar(data=orr, aes(x=full_name, weight=bhe), fill = \"#D00000\") +\n  coord_flip() +\n  labs(\n    title = \"Big Ten setters are pretty error free...mostly\",\n    subtitle = \"All of these setters have started over 5 games and have more than 100 assists, and guess \\nwho that long red bar is.\",\n    x = \"\",\n    y = \"Ball Handling Errors\",\n    caption = \"NCAA | Paige Trutna\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 10), \n    plot.subtitle = element_text(size=11), \n    panel.grid.minor = element_blank(),\n    axis.text.x = element_text(size = 10),\n    plot.title.position = \"plot\"\n    )\n\n\n\n\n\nFinally, let’s look at the Huskers’ hitting percentage when Orr is starting vs when Hames is starting. This one requires a bit of context. Orr started pretty much every game from August 26 to October 8 – and October 8 is about where you start to see the hitting percentage start to consistently be above .300. Thanks, Nicklin Hames. Another point - the Huskers started their Big Ten schedule on September 23. So, when Nicklin Hames began starting again, she wasn’t playing schools like Texas A&M Corpus Christi or Tulsa (no offense to them). She was playing schools like Penn State and Purdue.\n\n\nCode\nggplot() +\n  geom_step(data=bigtenmatches, aes(x=date, y=hit_pct, group=team), color = \"grey\") +\n  geom_step(data=nebraska, aes(x=date, y=hit_pct, group=team), color = \"#d00000\") +\n  theme_minimal() +\n  labs(\n    title = \"Did Nebraska's hitting percentage get better when \\nNicklin Hames began starting?\",\n    subtitle = \"It looks pretty consistent, but let's think about opponents here...\",\n    x = \"Date\",\n    y = \"Hitting Percentage\",\n    caption = \"NCAA | Paige Trutna\"\n  ) +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 10), \n    plot.subtitle = element_text(size=11), \n    panel.grid.minor = element_blank(),\n    axis.text.x = element_text(size = 10),\n    plot.title.position = \"plot\"\n    ) \n\n\n\n\n\nSo, Kennedi Orr hasn’t lived up to her hype…yet. Who knows who the Huskers’ starting setter will be next year, since Hames won’t be there. Maybe it’ll be Anni Evans. Maybe Orr will make long strides and prove herself some more. Maybe a new freshman or transfer will come in and take the spots. No matter how it turns out, hopefully the Huskers will be in good hands in 2023 (literally)."
  },
  {
    "objectID": "posts/i-tried-to-predict-march-madness/index.html",
    "href": "posts/i-tried-to-predict-march-madness/index.html",
    "title": "I tried to predict March Madness",
    "section": "",
    "text": "My Predictors\nI used machine learning to do this, and these were my predictors:\n\nTeam rolling points per possession\nTeam and opponent rolling median player value\nTeam and opponent rolling field goal percentage\nTeam cumulative points per possession\nTeam and opponent rolling offensive rebound factor\nTeam and opponent rolling fouls\n\nHere’s my thought process behind those predictors: if a team gets more points per possession, they’re going to score more in a game. Makes sense. I also added team and opponent rolling median player value to account for some sort of strength of schedule. If a team has a really strong median player value and their opponent doesn’t, their players will naturally outplay the other team. Fouls – if you can abstain from fouling the other team while making the other team foul you, you’ll get to the free throw line more and score more (easy) points. I added offensive rebound factor, simply because it added a good amount of accuracy to my model. Surprisingly, defensive rebounds didn’t do much for me. Now, field goal percentage. This was the very first predictor I added to my model, and this chart below is why:\n\n\n\nScatterplot with team vs opponent FG%.\n\n\n\n\nCode\nlibrary(tidyverse)\nlibrary(hoopR)\nlibrary(zoo)\nlibrary(tidymodels)\nlibrary(bonsai)\n\ngames <- load_mbb_team_box(2015:2023) %>% filter(game_date < as.Date(\"2023-03-14\"))\nschedule <- load_mbb_schedule(2015:2023) %>% filter(game_date < as.Date(\"2023-03-14\"))\nboxscore <- load_mbb_team_box(2015:2023) %>% filter(game_date < as.Date(\"2023-03-14\"))\nplayers <- load_mbb_player_box(2015:2023) %>% filter(game_date < as.Date(\"2023-03-14\"))\n\ngameswithpossessions <- games %>% \n  mutate(\n    possessions = round(field_goals_attempted - offensive_rebounds + turnovers + (.475 * free_throws_attempted), digits=0),\n    points_per_100 = (team_score/possessions)*100\n  ) %>% \n  filter(possessions <= 90 & possessions >= 53)\n\nplayervalues <- players %>% \n  filter(minutes >0) %>% \n  mutate(\n    value = points + rebounds + assists + steals + blocks - turnovers - (field_goals_attempted - field_goals_made) - (free_throws_attempted - free_throws_made)\n  ) %>% \n  group_by(team_short_display_name) %>% \n  summarize(\n    games = n(),\n    team_player_average_value = mean(value),\n    standard_dev = sd(value),\n    team_player_median_value = median(value)\n  ) \n\ngameswithpossessions <- gameswithpossessions %>% inner_join(playervalues)\n\nrollingteamstats <- gameswithpossessions %>% \n  arrange(game_date) %>%\n  group_by(team_short_display_name, season) %>%\n  mutate(\n    team_rolling_ppp = rollmean(lag(points_per_100, n=1), k=5, align=\"right\", fill=NA),\n    team_rolling_median_value = rollmean(lag(team_player_median_value, n=1), k=5, align=\"right\", fill=NA),\n    team_rolling_fgpct = rollmean(lag(field_goal_pct, n=1), k=5, align=\"right\", fill=NA),\n    team_cumulative_ppp = lag(cummean(points_per_100), n=1),\n    team_rolling_fouls = rollmean(lag(fouls, n=1), k=5, align=\"right\", fill=NA),\n    team_rolling_turnovers = rollmean(lag(turnovers, n=1), k=5, align=\"right\", fill=NA),\n    team_cumulative_player_value = lag(cummean(team_player_median_value), n=1)\n    #team_rolling_offensive_rebound_factor = rollmean(lag(team_offensive_rebound_factor, n=1), k=5, align=\"right\", fill=NA)\n    ) %>% \nungroup()\n\nteam_side <- rollingteamstats %>%\n  select(\n    game_id,\n    team_id, \n    team_short_display_name, \n    opponent_team_id,\n    game_date, \n    season, \n    team_score, \n    team_rolling_fouls,\n    team_rolling_ppp,\n    team_rolling_median_value,\n    team_rolling_fgpct,\n    team_cumulative_player_value,\n    team_cumulative_ppp,\n    offensive_rebounds,\n    defensive_rebounds,\n    team_rolling_turnovers\n    ) %>% \n  rename(\n    team_offensive_rebounds = offensive_rebounds,\n    team_defensive_rebounds = defensive_rebounds\n  ) %>% \n  na.omit() \n\nopponent_side <- team_side %>%\n  select(-opponent_team_id) %>% \n  rename(\n    opponent_team_id = team_id,\n    opponent_short_display_name = team_short_display_name,\n    opponent_score = team_score,\n    opponent_rolling_ppp = team_rolling_ppp,\n    opponent_rolling_median_value = team_rolling_median_value,\n    opponent_rolling_fgpct = team_rolling_fgpct,\n    opponent_cumulative_player_value = team_cumulative_player_value,\n    opponent_cumulative_ppp = team_cumulative_ppp,\n    opponent_offensive_rebounds = team_offensive_rebounds,\n    opponent_defensive_rebounds = team_defensive_rebounds,\n    opponent_rolling_fouls = team_rolling_fouls,\n    opponent_rolling_turnovers = team_rolling_turnovers\n  ) \n\ngameswithsides <- team_side %>% inner_join(opponent_side)\n\ngameswithsides <- gameswithsides %>% mutate(\n  team_result = as.factor(case_when(\n    team_score > opponent_score ~ \"W\",\n    opponent_score > team_score ~ \"L\"\n  )),\nteam_offensive_rebound_factor = team_offensive_rebounds / (team_offensive_rebounds + opponent_defensive_rebounds),\nopponent_offensive_rebound_factor = opponent_offensive_rebounds / (opponent_offensive_rebounds + team_defensive_rebounds),\nteam_rolling_offensive_rebound_factor = rollmean(lag(team_offensive_rebound_factor, n=1), k=10, align=\"right\", fill=NA),\nopponent_rolling_offensive_rebound_factor = rollmean(lag(opponent_offensive_rebound_factor, n=1), k=10, align=\"right\", fill=NA\n),\nteam_defensive_rebound_factor = team_defensive_rebounds / (team_defensive_rebounds + opponent_offensive_rebounds),\nopponent_defensive_rebound_factor = opponent_defensive_rebounds / (opponent_defensive_rebounds + team_offensive_rebounds),\nteam_rolling_defensive_rebound_factor = rollmean(lag(team_defensive_rebound_factor, n=1), k=10, align=\"right\", fill=NA),\nopponent_rolling_defensive_rebound_factor = rollmean(lag(opponent_defensive_rebound_factor, n=1), k=10, align=\"right\", fill=NA\n) ) %>% \nna.omit()\n\n#levels(gameswithsides$team_result)\n\ngameswithsides$team_result <- relevel(gameswithsides$team_result, ref=\"W\")\n\n#levels(gameswithsides$team_result)\n\nmodelgames <- gameswithsides %>% \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_short_display_name, \n    season, \n    team_rolling_ppp, \n   # opponent_rolling_ppp, \n    team_result,\n    team_rolling_median_value,\n    opponent_rolling_median_value,\n    team_rolling_fgpct,\n    opponent_rolling_fgpct,\n    #team_cumulative_player_value,\n    team_cumulative_ppp,\n    #opponent_cumulative_player_value,\n    #opponent_cumulative_ppp,\n    team_rolling_offensive_rebound_factor,\n    opponent_rolling_offensive_rebound_factor,\n    #team_rolling_defensive_rebound_factor,\n    #opponent_rolling_defensive_rebound_factor,\n    team_rolling_fouls,\n    opponent_rolling_fouls,\n    #team_rolling_turnovers,\n    #opponent_rolling_turnovers\n    ) %>% na.omit()\n\nlog_split <- initial_split(modelgames, prop = .8)\nlog_train <- training(log_split)\nlog_test <- testing(log_split)\n\nlog_recipe <- \n  recipe(team_result ~ ., data = log_train) %>% \n  update_role(game_id, game_date, team_short_display_name, opponent_short_display_name, season, new_role = \"ID\")\n#summary(log_recipe)\n\nlightgbm_mod <- \n  boost_tree() %>% \n  set_engine(\"lightgbm\") %>% \n  set_mode(mode = \"classification\") \n\nlightgbm_workflow <- \n  workflow() %>% \n  add_model(lightgbm_mod) %>% \n  add_recipe(log_recipe)\n\nlightgbm_fit <- \n  lightgbm_workflow %>% \n  fit(data = log_train)\n\nlightgbmtestpredict <- lightgbm_fit %>% predict(new_data = log_test) %>%\n  bind_cols(log_test) \n\nlightgbmtestpredict <- lightgbm_fit %>% predict(new_data = log_test, type=\"prob\") %>%\n  bind_cols(lightgbmtestpredict)\n\n#metrics(lightgbmtestpredict, team_result, .pred_class)\n\n\n\n\nCode\nrollingteamstats <- gameswithpossessions %>% \n  arrange(game_date) %>%\n  group_by(team_short_display_name, season) %>%\n  mutate(\n    team_rolling_ppp = rollmean(points_per_100, k=5, align=\"right\", fill=NA),\n    team_rolling_median_value = rollmean(team_player_median_value, k=5, align=\"right\", fill=NA),\n    team_rolling_fgpct = rollmean(field_goal_pct, k=5, align=\"right\", fill=NA),\n    team_cumulative_ppp = cummean(points_per_100),\n    team_rolling_fouls = rollmean(fouls, k=5, align=\"right\", fill=NA),\n    team_rolling_turnovers = rollmean(turnovers, k=5, align=\"right\", fill=NA),\n    #team_cumulative_player_value = cummean(team_median_player_value),\n    #team_rolling_offensive_rebound_factor = rollmean(lag(team_offensive_rebound_factor, n=1), k=5, align=\"right\", fill=NA)\n    ) %>% \nungroup()\n\nteam_side <- rollingteamstats %>%\n  select(\n    game_id,\n    team_id, \n    team_short_display_name, \n    opponent_team_id, \n    game_date, \n    season, \n    team_score, \n    team_rolling_ppp,\n    team_rolling_median_value,\n    team_rolling_fgpct,\n    #team_cumulative_player_value,\n    team_cumulative_ppp,\n    offensive_rebounds,\n    defensive_rebounds,\n    team_rolling_fouls\n    ) %>% \n  rename(\n    team_offensive_rebounds = offensive_rebounds,\n    team_defensive_rebounds = defensive_rebounds\n  ) %>% \n  na.omit() \n\nopponent_side <- team_side %>%\n  select(-opponent_team_id) %>% \n  rename(\n    opponent_team_id = team_id,\n    opponent_short_display_name = team_short_display_name,\n    opponent_score = team_score,\n    opponent_rolling_ppp = team_rolling_ppp,\n    opponent_rolling_median_value = team_rolling_median_value,\n    opponent_rolling_fgpct = team_rolling_fgpct,\n    #opponent_cumulative_player_value = team_cumulative_player_value,\n    opponent_cumulative_ppp = team_cumulative_ppp,\n    opponent_offensive_rebounds = team_offensive_rebounds,\n    opponent_defensive_rebounds = team_defensive_rebounds,\n    opponent_rolling_fouls = team_rolling_fouls\n  ) \n\ngameswithsides <- team_side %>% inner_join(opponent_side)\n\ngameswithsides <- gameswithsides %>% mutate(\n  team_result = as.factor(case_when(\n    team_score > opponent_score ~ \"W\",\n    opponent_score > team_score ~ \"L\"\n  )),\nteam_offensive_rebound_factor = team_offensive_rebounds / (team_offensive_rebounds + opponent_defensive_rebounds),\nopponent_offensive_rebound_factor = opponent_offensive_rebounds / (opponent_offensive_rebounds + team_defensive_rebounds),\nteam_rolling_offensive_rebound_factor = rollmean(team_offensive_rebound_factor, k=10, align=\"right\", fill=NA),\nopponent_rolling_offensive_rebound_factor = rollmean(opponent_offensive_rebound_factor, k=10, align=\"right\", fill=NA\n),\nteam_defensive_rebound_factor = team_defensive_rebounds / (team_defensive_rebounds + opponent_offensive_rebounds),\nopponent_defensive_rebound_factor = opponent_defensive_rebounds / (opponent_defensive_rebounds + team_offensive_rebounds),\nteam_rolling_defensive_rebound_factor = rollmean(team_defensive_rebound_factor, k=10, align=\"right\", fill=NA),\nopponent_rolling_defensive_rebound_factor = rollmean(opponent_defensive_rebound_factor, k=10, align=\"right\", fill=NA\n) ) %>% \nna.omit()\n\n#levels(gameswithsides$team_result)\n\ngameswithsides$team_result <- relevel(gameswithsides$team_result, ref=\"W\")\n\n#levels(gameswithsides$team_result)\n\nmodelgames <- gameswithsides %>% \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_short_display_name, \n    season, \n    team_rolling_ppp, \n    #opponent_rolling_ppp, \n    team_result,\n    team_rolling_median_value,\n    opponent_rolling_median_value,\n    team_rolling_fgpct,\n    opponent_rolling_fgpct,\n    #team_cumulative_player_value,\n    team_cumulative_ppp,\n    #opponent_cumulative_player_value,\n    #opponent_cumulative_ppp,\n    team_rolling_offensive_rebound_factor,\n    opponent_rolling_offensive_rebound_factor,\n    #team_rolling_defensive_rebound_factor,\n    #opponent_rolling_defensive_rebound_factor,\n    team_rolling_fouls,\n    opponent_rolling_fouls\n    ) %>% na.omit()\n\n\n\n\nCode\nggplot() + \n  geom_point(data=modelgames, aes(x=team_rolling_fgpct, y=opponent_rolling_fgpct, color=team_result)) +\n  labs(\n    title = \"Field Goal Percentage is Important\",\n    subtitle = \"There's a natural line here -- if teams have a high FG% and their opponent's is low, they'll win.\",\n    x = \"Team FG%\",\n    y = \"Opponent FG%\"\n  )\n\n\n\n\n\n\n\nCode\nplayingames <- tibble(\n  team_short_display_name=\"Texas A&M-CC\",\n  opponent_short_display_name=\"SE Missouri St\"\n) %>% add_row(\n  team_short_display_name=\"Texas Southern\",\n  opponent_short_display_name=\"Fair Dickinson\"\n) %>% add_row(\n  team_short_display_name=\"Mississippi St\",\n  opponent_short_display_name=\"Pitt\"\n) %>% add_row(\n  team_short_display_name=\"Arizona St\",\n  opponent_short_display_name=\"Nevada\"\n) \n\nplayingames <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(playingames)\n\nplayingames <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(playingames) \n\n\nplayin <- lightgbm_fit %>% \n  predict(new_data = playingames) %>%\n  bind_cols(playingames) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nplayin <- lightgbm_fit %>% \n  predict(new_data = playingames, type=\"prob\") %>%\n  bind_cols(playin) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround1games <- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"Texas A&M-CC\"\n) %>% add_row(\n  team_short_display_name=\"Maryland\",\n  opponent_short_display_name=\"West Virginia\"\n) %>% add_row(\n  team_short_display_name=\"San Diego St\",\n  opponent_short_display_name=\"Charleston\"\n) %>% add_row(\n  team_short_display_name=\"Virginia\",\n  opponent_short_display_name=\"Furman\"\n) %>% add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_short_display_name=\"NC State\"\n) %>% add_row(\n  team_short_display_name=\"Baylor\",\n  opponent_short_display_name=\"UCSB\"\n) %>% add_row(\n  team_short_display_name=\"Missouri\",\n  opponent_short_display_name=\"Utah State\"\n) %>% add_row(\n  team_short_display_name=\"Arizona\",\n  opponent_short_display_name=\"Princeton\"\n)\n\nsouthround1games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(southround1games)\n\nsouthround1games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(southround1games) \n\nsouthround1 <- lightgbm_fit %>% \n  predict(new_data = southround1games) %>%\n  bind_cols(southround1games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround1 <- lightgbm_fit %>% \n  predict(new_data = southround1games, type=\"prob\") %>%\n  bind_cols(southround1) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround2games <- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"Maryland\"\n) %>% add_row(\n  team_short_display_name=\"San Diego St\",\n  opponent_short_display_name=\"Virginia\"\n) %>% add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_short_display_name=\"Baylor\"\n) %>% add_row(\n  team_short_display_name=\"Missouri\",\n  opponent_short_display_name=\"Arizona\"\n) \n\nsouthround2games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(southround2games)\n\nsouthround2games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(southround2games) \n\nsouthround2 <- lightgbm_fit %>% \n  predict(new_data = southround2games) %>%\n  bind_cols(southround2games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround2 <- lightgbm_fit %>% \n  predict(new_data = southround2games, type=\"prob\") %>%\n  bind_cols(southround2) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround3games <- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"Virginia\"\n) %>% add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_short_display_name=\"Missouri\"\n) \n\nsouthround3games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(southround3games)\n\nsouthround3games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(southround3games) \n\nsouthround3 <- lightgbm_fit %>% \n  predict(new_data = southround3games) %>%\n  bind_cols(southround3games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround3 <- lightgbm_fit %>% \n  predict(new_data = southround3games, type=\"prob\") %>%\n  bind_cols(southround3) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround4games <- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"Creighton\"\n) \n\nsouthround4games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(southround4games)\n\nsouthround4games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(southround4games) \n\nsouthround4 <- lightgbm_fit %>% \n  predict(new_data = southround4games) %>%\n  bind_cols(southround4games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround4 <- lightgbm_fit %>% \n  predict(new_data = southround4games, type=\"prob\") %>%\n  bind_cols(southround4) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\neastround1games <- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_short_display_name=\"Fair Dickinson\"\n) %>% add_row(\n  team_short_display_name=\"Memphis\",\n  opponent_short_display_name=\"FAU\"\n) %>% add_row(\n  team_short_display_name=\"Duke\",\n  opponent_short_display_name=\"Oral Roberts\"\n) %>% add_row(\n  team_short_display_name=\"Tennessee\",\n  opponent_short_display_name=\"Louisiana\"\n) %>% add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_short_display_name=\"Providence\"\n) %>% add_row(\n  team_short_display_name=\"Kansas St\",\n  opponent_short_display_name=\"Montana St\"\n) %>% add_row(\n  team_short_display_name=\"Michigan St\",\n  opponent_short_display_name=\"USC\"\n) %>% add_row(\n  team_short_display_name=\"Marquette\",\n  opponent_short_display_name=\"Vermont\"\n) \n\neastround1games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(eastround1games)\n\neastround1games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(eastround1games) \n\neastround1 <- lightgbm_fit %>% \n  predict(new_data = eastround1games) %>%\n  bind_cols(eastround1games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround1 <- lightgbm_fit %>% \n  predict(new_data = eastround1games, type=\"prob\") %>%\n  bind_cols(eastround1) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\neastround2games <- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_short_display_name=\"Memphis\"\n) %>% add_row(\n  team_short_display_name=\"Duke\",\n  opponent_short_display_name=\"Louisiana\"\n) %>% add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_short_display_name=\"Kansas St\"\n) %>% add_row(\n  team_short_display_name=\"USC\",\n  opponent_short_display_name=\"Marquette\"\n)\n\neastround2games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(eastround2games)\n\neastround2games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(eastround2games) \n\n\neastround2 <- lightgbm_fit %>% \n  predict(new_data = eastround2games) %>%\n  bind_cols(eastround2games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround2 <- lightgbm_fit %>% \n  predict(new_data = eastround2games, type=\"prob\") %>%\n  bind_cols(eastround2) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\neastround3games <- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_short_display_name=\"Duke\"\n) %>% add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_short_display_name=\"Marquette\"\n)\n\neastround3games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(eastround3games)\n\neastround3games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(eastround3games) \n\n\neastround3 <- lightgbm_fit %>% \n  predict(new_data = eastround3games) %>%\n  bind_cols(eastround3games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround3 <- lightgbm_fit %>% \n  predict(new_data = eastround3games, type=\"prob\") %>%\n  bind_cols(eastround3) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\neastround4games <- tibble(\n  team_short_display_name=\"Duke\",\n  opponent_short_display_name=\"Marquette\"\n)\n\neastround4games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(eastround4games)\n\neastround4games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(eastround4games) \n\n\neastround4 <- lightgbm_fit %>% \n  predict(new_data = eastround4games) %>%\n  bind_cols(eastround4games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround4 <- lightgbm_fit %>% \n  predict(new_data = eastround4games, type=\"prob\") %>%\n  bind_cols(eastround4) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround1games <- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"N Kentucky\"\n) %>% add_row(\n  team_short_display_name=\"Iowa\",\n  opponent_short_display_name=\"Auburn\"\n) %>% add_row(\n  team_short_display_name=\"Miami\",\n  opponent_short_display_name=\"Drake\"\n) %>% add_row(\n  team_short_display_name=\"Indiana\",\n  opponent_short_display_name=\"Kent State\"\n) %>% add_row(\n  team_short_display_name=\"Iowa State\",\n  opponent_short_display_name=\"Mississippi St\"\n) %>% add_row(\n  team_short_display_name=\"Xavier\",\n  opponent_short_display_name=\"Kennesaw St\"\n) %>% add_row(\n  team_short_display_name=\"Texas A&M\",\n  opponent_short_display_name=\"Penn State\"\n) %>% add_row(\n  team_short_display_name=\"Texas\",\n  opponent_short_display_name=\"Colgate\"\n)\n\nmidwestround1games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(midwestround1games)\n\nmidwestround1games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(midwestround1games) \n\n\nmidwestround1 <- lightgbm_fit %>% \n  predict(new_data = midwestround1games) %>%\n  bind_cols(midwestround1games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround1 <- lightgbm_fit %>% \n  predict(new_data = midwestround1games, type=\"prob\") %>%\n  bind_cols(midwestround1) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround2games <- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"Iowa\"\n) %>% add_row(\n  team_short_display_name=\"Miami\",\n  opponent_short_display_name=\"Indiana\"\n) %>% add_row(\n  team_short_display_name=\"Iowa State\",\n  opponent_short_display_name=\"Xavier\"\n) %>% add_row(\n  team_short_display_name=\"Texas A&M\",\n  opponent_short_display_name=\"Colgate\"\n)\n\nmidwestround2games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(midwestround2games)\n\nmidwestround2games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(midwestround2games) \n\n\nmidwestround2 <- lightgbm_fit %>% \n  predict(new_data = midwestround2games) %>%\n  bind_cols(midwestround2games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround2 <- lightgbm_fit %>% \n  predict(new_data = midwestround2games, type=\"prob\") %>%\n  bind_cols(midwestround2) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround3games <- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"Miami\"\n) %>% add_row(\n  team_short_display_name=\"Xavier\",\n  opponent_short_display_name=\"Texas A&M\"\n) \n\nmidwestround3games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(midwestround3games)\n\nmidwestround3games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(midwestround3games) \n\n\nmidwestround3 <- lightgbm_fit %>% \n  predict(new_data = midwestround3games) %>%\n  bind_cols(midwestround3games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround3 <- lightgbm_fit %>% \n  predict(new_data = midwestround3games, type=\"prob\") %>%\n  bind_cols(midwestround3) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround4games <- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"Xavier\"\n) \n\nmidwestround4games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(midwestround4games)\n\nmidwestround4games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(midwestround4games) \n\nmidwestround4 <- lightgbm_fit %>% \n  predict(new_data = midwestround4games) %>%\n  bind_cols(midwestround4games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround4 <- lightgbm_fit %>% \n  predict(new_data = midwestround4games, type=\"prob\") %>%\n  bind_cols(midwestround4) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nwestround1games <- tibble(\n  team_short_display_name=\"Kansas\",\n  opponent_short_display_name=\"Howard\"\n) %>% add_row(\n  team_short_display_name=\"Arkansas\",\n  opponent_short_display_name=\"Illinois\"\n) %>% add_row(\n  team_short_display_name=\"Saint Mary's\",\n  opponent_short_display_name=\"VCU\"\n) %>% add_row(\n  team_short_display_name=\"UConn\",\n  opponent_short_display_name=\"Iona\"\n) %>% add_row(\n  team_short_display_name=\"TCU\",\n  opponent_short_display_name=\"Nevada\"\n) %>% add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_short_display_name=\"Grand Canyon\"\n) %>% add_row(\n  team_short_display_name=\"Northwestern\",\n  opponent_short_display_name=\"Boise St\"\n) %>% add_row(\n  team_short_display_name=\"UCLA\",\n  opponent_short_display_name=\"UNC Asheville\"\n) \n\nwestround1games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(westround1games)\n\nwestround1games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(westround1games) \n\n\nwestround1 <- lightgbm_fit %>% \n  predict(new_data = westround1games) %>%\n  bind_cols(westround1games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround1 <- lightgbm_fit %>% \n  predict(new_data = westround1games, type=\"prob\") %>%\n  bind_cols(westround1) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nwestround2games <- tibble(\n  team_short_display_name=\"Kansas\",\n  opponent_short_display_name=\"Arkansas\"\n) %>% add_row(\n  team_short_display_name=\"Saint Mary's\",\n  opponent_short_display_name=\"UConn\"\n) %>% add_row(\n  team_short_display_name=\"TCU\",\n  opponent_short_display_name=\"Gonzaga\"\n) %>% add_row(\n  team_short_display_name=\"Boise St\",\n  opponent_short_display_name=\"UNC Asheville\"\n) \n\nwestround2games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(westround2games)\n\nwestround2games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(westround2games) \n\n\nwestround2 <- lightgbm_fit %>% \n  predict(new_data = westround2games) %>%\n  bind_cols(westround2games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround2 <- lightgbm_fit %>% \n  predict(new_data = westround2games, type=\"prob\") %>%\n  bind_cols(westround2) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nwestround3games <- tibble(\n  team_short_display_name=\"Kansas\",\n  opponent_short_display_name=\"Saint Mary's\"\n) %>% add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_short_display_name=\"Boise St\"\n) \n\nwestround3games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(westround3games)\n\nwestround3games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(westround3games) \n\n\nwestround3 <- lightgbm_fit %>% \n  predict(new_data = westround3games) %>%\n  bind_cols(westround3games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround3 <- lightgbm_fit %>% \n  predict(new_data = westround3games, type=\"prob\") %>%\n  bind_cols(westround3) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nwestround4games <- tibble(\n  team_short_display_name=\"Kansas\",\n  opponent_short_display_name=\"Gonzaga\"\n) \n\nwestround4games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(westround4games)\n\nwestround4games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(westround4games) \n\nwestround4 <- lightgbm_fit %>% \n  predict(new_data = westround4games) %>%\n  bind_cols(westround4games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround4 <- lightgbm_fit %>% \n  predict(new_data = westround4games, type=\"prob\") %>%\n  bind_cols(westround4) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nfinalfourgames <- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"Marquette\"\n) %>% add_row(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"Gonzaga\"\n) \n\nfinalfourgames <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(finalfourgames)\n\nfinalfourgames <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(finalfourgames) \n\nfinalfour <- lightgbm_fit %>% \n  predict(new_data = finalfourgames) %>%\n  bind_cols(finalfourgames) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nfinalfour <- lightgbm_fit %>% \n  predict(new_data = finalfourgames, type=\"prob\") %>%\n  bind_cols(finalfour) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nchampionshipgames <- tibble(\n  team_short_display_name=\"Marquette\",\n  opponent_short_display_name=\"Houston\"\n)\n\nchampionshipgames <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(championshipgames)\n\nchampionshipgames <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(championshipgames) \n\nchampionship <- lightgbm_fit %>% \n  predict(new_data = championshipgames) %>%\n  bind_cols(championshipgames) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nchampionship <- lightgbm_fit %>% \n  predict(new_data = championshipgames, type=\"prob\") %>%\n  bind_cols(championship) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\n\n\nCode\nggplot() + \n  geom_point(data=modelgames, aes(x=team_rolling_fgpct, y=opponent_rolling_fgpct), color=\"grey\") +\n  geom_point(data=eastround1, aes(x=team_rolling_fgpct, y=opponent_rolling_fgpct, color=.pred_class)) +\n  geom_point(data=eastround2, aes(x=team_rolling_fgpct, y=opponent_rolling_fgpct, color=.pred_class)) +\n  labs(\n    title = \"Basically a 50/50 shot\",\n    subtitle = \"The team and opponent field goal percentages were the same. So, if my model was basing the \\nprediction on field goal percentage, it was 50/50.\",\n    x = \"Team FG%\",\n    y = \"Opponent FG%\"\n  )\n\n\n\n\n\n\n\nHow did it go?\nMy bracket was named “Crackin like a two eggshell”, a nod to my favorite podcast, the Schick and Nick show. Relatively to my classmates, my bracket was indeed, crackin like a two eggshell! I got fourth out of 17 people. Relatively to the rest of the world? Not very crackin. I was in the 32nd percentile. At the end of this post are some pictures of my bracket. There’s too much red there for my liking.\nSo what went wrong? Well, remember that chart I showed you earlier with the field goal percentage? Here’s that same chart, but the colored dots are from the East region of my bracket, where a lot went wrong.\n\n\n\nScatterplot with the team and opponent FG% of my East region.\n\n\nAnother notable failure of mine is that I predicted two 15 over 2 upsets – Colgate over Texas and UNC Asheville over UCLA. Neither of these games was the actual 15/2 upset that happened. Soooo, I guess I knew it was going to happen at some point? I just didn’t know when.\nYou might ask, Paige, what was your biggest victory? Well, guess what, I’m going to complain some more. Not because I didn’t have a victory, but because my victory was that I correctly predicted Creighton, of all teams, to make it to the Elite 8. Why, oh why, did I have to predict the rivals of my team to make it to the Elite 8, and why, oh why, did it have to be right?\n\n\n\nSouth/Midwest Regions of my bracket\n\n\n\n\n\nEast/West regions of my bracket\n\n\n\n\n\nMy final four\n\n\nI might try this again next year. We’ll see. If I do, let’s hope that I finish higher than the 32nd percentile."
  },
  {
    "objectID": "posts/mahomes-hill/index.html",
    "href": "posts/mahomes-hill/index.html",
    "title": "Did Patrick Mahomes and Tyreek Hill rely on each other? Or are they doing just fine without each other?",
    "section": "",
    "text": "*Data for this project was collected as of Nov. 30, 2022.\n\n\nCode\nlibrary(tidyverse)\nlibrary(gt)\noffense21 <- read_csv(\"offense21.csv\")\noffense22 <- read_csv(\"offense22.csv\")\nreceiving21 <- read_csv(\"receiving21.csv\")\nreceiving22 <- read_csv(\"receiving22.csv\")\npassing21 <- read_csv(\"passing21.csv\")\npassing22 <- read_csv(\"passing22.csv\")\nmahomes <- read_csv(\"mahomes.csv\")\nhillgames21 <- read_csv(\"hillgames21.csv\")\nhillgames22 <- read_csv(\"hillgames22.csv\")\nhill21 <- receiving21 %>% filter(Player == \"Tyreek Hill*\")\nhill22 <- receiving22 %>% filter(Player == \"Tyreek Hill\")\nchiefsreceivers <- receiving22 %>% filter(Tm == \"KAN\", Yds > 100)\nhill21cleaned <- hill21 %>% \n  mutate(Player=gsub(\"\\\\*\",\"\",Player))\n\nggplot() +\n  geom_line(data=hillgames22, aes(x=Week, y=Yds), color=\"#008E97\") + \n  geom_line(data=hillgames21, aes(x=Week, y=Yds), color=\"#E31837\") +\n  labs(\n    title = \"Tyreek Hill is performing just as well in 2022 as \\nin 2021\",\n    subtitle = \"Most seemed to think he'd flop with Tua, but he's shown differently.\",\n    x = \"Week (Red = 2021 Tyreek, Blue = 2022 Tyreek)\",\n    y = \"Yards\",\n    caption = \"Pro Football Reference | Paige Trutna\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 10), \n    plot.subtitle = element_text(size=11), \n    panel.grid.minor = element_blank(),\n    axis.text.x = element_text(size = 10),\n    plot.title.position = \"plot\"\n    ) \n\n\n\n\n\nThere’s Tyreek’s numbers. But what about Mahomes? He’s part of the MVP conversation, and has 326.2 yards/game this season and 29 touchdowns. His yards/game stat is the highest it’s been since his NFL career began in 2017. He’s still making the jaw-dropping plays that he did with Hill. So, Mahomes is still a great quarterback, and yes, he still does have some great weapons.\n\n\nCode\nmahomestable <- mahomes %>% \n  select(Year, `Y/G`, `TD%`) %>% \n  mutate(Year=gsub(\"\\\\*\",\"\",Year)) %>% \n  mutate(Year=gsub(\"\\\\+\",\"\",Year))\n\nmahomestable %>% \n  gt() %>% \n  cols_label(\n    Year = \"Year\",\n    `Y/G` = \"Yards Per Game\",\n    `TD%` = \"Touchdown Percentage\"\n  ) %>%\n  tab_header(\n    title = \"Has Mahomes dropped off without Hill?\",\n    subtitle = \"Nope, he hasn't. In fact, this is his best year in the league in terms of yards per game (2018 was the best for TD Percentage).\"\n  ) %>% tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) %>% tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) %>%\n  tab_source_note(\n    source_note = md(\"By: Paige Trutna  |  Source: Pro Football Reference\")\n  ) %>%\n  tab_style(\n    locations = cells_column_labels(columns = everything()),\n    style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=14))\n  ) %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"#E31837\"),\n      cell_text(color = \"white\")\n      ),\n    locations = cells_body(\n      rows = Year == \"2022\")\n  ) %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"#FFB81C\"),\n      cell_text(color = \"black\")\n      ),\n    locations = cells_body(\n      rows = Year == \"2018\")\n   ) \n\n\n\n\n\n\n  \n    \n      Has Mahomes dropped off without Hill?\n    \n    \n      Nope, he hasn't. In fact, this is his best year in the league in terms of yards per game (2018 was the best for TD Percentage).\n    \n  \n  \n    \n      Year\n      Yards Per Game\n      Touchdown Percentage\n    \n  \n  \n    2017\n284.0\n0.0\n    2018\n318.6\n8.6\n    2019\n287.9\n5.4\n    2020\n316.0\n6.5\n    2021\n284.6\n5.6\n    2022\n326.2\n6.8\n    Career\n304.5\n6.5\n  \n  \n    \n      By: Paige Trutna  |  Source: Pro Football Reference\n    \n  \n  \n\n\n\n\nThe difference in the Chiefs’ offense between 2021 and 2022 is the receptions that each receiver gets. In 2021, Hill got the most receptions by far - and for good reason. This year, Mahomes had to make a change. And the change didn’t effect his numbers at all. Sure, he doesn’t have a go-to wide receiver the way he had Hill (he still has TE Travis Kelce, don’t worry), but the receptions for the Chiefs WRs have been more balanced.\n\n\nCode\nggplot() + \n  geom_bar(data=chiefsreceivers, aes(x=reorder(Player, Rec), weight=Rec), fill=\"#E31837\") +\n  geom_bar(data=hill21cleaned, aes(x=Player, weight=Rec), fill = \"#FFB81C\") +\n  coord_flip() +\n  labs(\n    title = \"In 2021, Patrick Mahomes threw to Tyreek Hill...a lot\",\n    subtitle = \"But, does this show a more balanced offense for the 2022 \\nChiefs (represented in red)?\",\n    x = \"\",\n    y = \"Receptions\",\n    caption = \"Pro Football Reference | Paige Trutna\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 10), \n    plot.subtitle = element_text(size=11), \n    panel.grid.minor = element_blank(),\n    axis.text.x = element_text(size = 10),\n    plot.title.position = \"plot\"\n    ) \n\n\n\n\n\nWe’ll see what happens in the postseason this year, but both the Dolphins and the Chiefs will be there. And that’s due, in part, to the Chiefs’ star quarterback and the Dolphins’ star receiver…yes, even though they don’t play together anymore."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SPMC Blog",
    "section": "",
    "text": "ncaa\n\n\nmarchmadness\n\n\nmachinelearning\n\n\nbasketball\n\n\n\n\n\n\n\n\n\n\n\nApr 18, 2023\n\n\nPaige Trutna\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nfootball\n\n\nnfl\n\n\npatrickmahomes\n\n\ntyreekhill\n\n\nchiefs\n\n\n\n\n\n\n\n\n\n\n\nNov 30, 2022\n\n\nPaige Trutna\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nvolleyball\n\n\nkennediorr\n\n\n\n\n\n\n\n\n\n\n\nNov 3, 2022\n\n\nPaige Trutna\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hi! My name is Paige Trutna, and I’m a Sports Media and Communications/Journalism double-major at the University of Nebraska-Lincoln. Currently, I work for Huskers athletics in the communications department. I write press releases, post on social media, work at various sporting events and more. I am also the President of the University Lutheran Chapel. There, I coordinate events, do service around the community, send out announcements, work with other leaders and handle other situations as they arise. I am also helping lead us through a transitional period between pastors."
  },
  {
    "objectID": "NCAAPredictions.html",
    "href": "NCAAPredictions.html",
    "title": "SPMC Blog",
    "section": "",
    "text": "—– FEATURE ENGINEERING —–\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.1.2\n\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.5.0\n✔ readr   2.1.2     ✔ forcats 0.5.2\n\n\nWarning: package 'ggplot2' was built under R version 4.1.2\n\n\nWarning: package 'tibble' was built under R version 4.1.2\n\n\nWarning: package 'tidyr' was built under R version 4.1.2\n\n\nWarning: package 'readr' was built under R version 4.1.2\n\n\nWarning: package 'purrr' was built under R version 4.1.2\n\n\nWarning: package 'dplyr' was built under R version 4.1.2\n\n\nWarning: package 'stringr' was built under R version 4.1.2\n\n\nWarning: package 'forcats' was built under R version 4.1.2\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(hoopR)\nlibrary(zoo)\n\nWarning: package 'zoo' was built under R version 4.1.2\n\n\n\nAttaching package: 'zoo'\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\nlibrary(tidymodels)\n\nWarning: package 'tidymodels' was built under R version 4.1.2\n\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.0.0 ──\n✔ broom        1.0.3     ✔ rsample      1.1.1\n✔ dials        1.1.0     ✔ tune         1.0.1\n✔ infer        1.0.4     ✔ workflows    1.1.2\n✔ modeldata    1.1.0     ✔ workflowsets 1.0.0\n✔ parsnip      1.0.3     ✔ yardstick    1.1.0\n✔ recipes      1.0.4     \n\n\nWarning: package 'dials' was built under R version 4.1.2\n\n\nWarning: package 'scales' was built under R version 4.1.2\n\n\nWarning: package 'infer' was built under R version 4.1.2\n\n\nWarning: package 'parsnip' was built under R version 4.1.2\n\n\nWarning: package 'recipes' was built under R version 4.1.2\n\n\nWarning: package 'rsample' was built under R version 4.1.2\n\n\nWarning: package 'tune' was built under R version 4.1.2\n\n\nWarning: package 'workflows' was built under R version 4.1.2\n\n\nWarning: package 'workflowsets' was built under R version 4.1.2\n\n\nWarning: package 'yardstick' was built under R version 4.1.2\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Use suppressPackageStartupMessages() to eliminate package startup messages\n\nlibrary(bonsai)\n\nWarning: package 'bonsai' was built under R version 4.1.2\n\ngames <- load_mbb_team_box(2015:2023) %>% filter(game_date < as.Date(\"2023-03-14\"))\nschedule <- load_mbb_schedule(2015:2023) %>% filter(game_date < as.Date(\"2023-03-14\"))\nboxscore <- load_mbb_team_box(2015:2023) %>% filter(game_date < as.Date(\"2023-03-14\"))\nplayers <- load_mbb_player_box(2015:2023) %>% filter(game_date < as.Date(\"2023-03-14\"))\n\n\ngameswithpossessions <- games %>% \n  mutate(\n    possessions = round(field_goals_attempted - offensive_rebounds + turnovers + (.475 * free_throws_attempted), digits=0),\n    points_per_100 = (team_score/possessions)*100\n  ) %>% \n  filter(possessions <= 90 & possessions >= 53)\n\n\nplayervalues <- players %>% \n  filter(minutes >0) %>% \n  mutate(\n    value = points + rebounds + assists + steals + blocks - turnovers - (field_goals_attempted - field_goals_made) - (free_throws_attempted - free_throws_made)\n  ) %>% \n  group_by(team_short_display_name) %>% \n  summarize(\n    games = n(),\n    team_player_average_value = mean(value),\n    standard_dev = sd(value),\n    team_player_median_value = median(value)\n  ) \n\n\n#homeside <- schedule %>% inner_join(gameswithpossessions, by = c(\"game_id\",  \"season\", \"home_uid\"=\"team_uid\"))\n\n#homeside %>% inner_join(games, by = c(\"game_id\",  \"season\", \"away_uid\"=\"team_uid\"))\n\n#schedule %>% inner_join(boxscore)\n\n#homegames <- schedule %>% inner_join(boxscore, by = c(\"game_id\",  \"season\", \"home_uid\"=\"team_uid\"))\n\ngameswithpossessions <- gameswithpossessions %>% inner_join(playervalues)\n\nJoining, by = \"team_short_display_name\"\n\n#awaygames <- homegames %>% inner_join(boxscore, by = c(\"game_id\",  \"season\", \"away_uid\"=\"team_uid\")) %>% \n  #rename(\n   # home_field_goal_pct = field_goal_pct.x, \n   # away_free_throw_pct = free_throw_pct.y\n  #  )\n\n\nrollingteamstats <- gameswithpossessions %>% \n  arrange(game_date) %>%\n  group_by(team_short_display_name, season) %>%\n  mutate(\n    team_rolling_ppp = rollmean(lag(points_per_100, n=1), k=5, align=\"right\", fill=NA),\n    team_rolling_median_value = rollmean(lag(team_player_median_value, n=1), k=5, align=\"right\", fill=NA),\n    team_rolling_fgpct = rollmean(lag(field_goal_pct, n=1), k=5, align=\"right\", fill=NA),\n    team_cumulative_ppp = lag(cummean(points_per_100), n=1),\n    team_rolling_fouls = rollmean(lag(fouls, n=1), k=5, align=\"right\", fill=NA),\n    team_rolling_turnovers = rollmean(lag(turnovers, n=1), k=5, align=\"right\", fill=NA),\n    team_cumulative_player_value = lag(cummean(team_player_median_value), n=1)\n    #team_rolling_offensive_rebound_factor = rollmean(lag(team_offensive_rebound_factor, n=1), k=5, align=\"right\", fill=NA)\n    ) %>% \nungroup()\n\n\nteam_side <- rollingteamstats %>%\n  select(\n    game_id,\n    team_id, \n    team_short_display_name, \n    opponent_team_id,\n    game_date, \n    season, \n    team_score, \n    team_rolling_fouls,\n    team_rolling_ppp,\n    team_rolling_median_value,\n    team_rolling_fgpct,\n    team_cumulative_player_value,\n    team_cumulative_ppp,\n    offensive_rebounds,\n    defensive_rebounds,\n    team_rolling_turnovers\n    ) %>% \n  rename(\n    team_offensive_rebounds = offensive_rebounds,\n    team_defensive_rebounds = defensive_rebounds\n  ) %>% \n  na.omit() \n\nopponent_side <- team_side %>%\n  select(-opponent_team_id) %>% \n  rename(\n    opponent_team_id = team_id,\n    opponent_short_display_name = team_short_display_name,\n    opponent_score = team_score,\n    opponent_rolling_ppp = team_rolling_ppp,\n    opponent_rolling_median_value = team_rolling_median_value,\n    opponent_rolling_fgpct = team_rolling_fgpct,\n    opponent_cumulative_player_value = team_cumulative_player_value,\n    opponent_cumulative_ppp = team_cumulative_ppp,\n    opponent_offensive_rebounds = team_offensive_rebounds,\n    opponent_defensive_rebounds = team_defensive_rebounds,\n    opponent_rolling_fouls = team_rolling_fouls,\n    opponent_rolling_turnovers = team_rolling_turnovers\n  ) \n\ngameswithsides <- team_side %>% inner_join(opponent_side)\n\nJoining, by = c(\"game_id\", \"opponent_team_id\", \"game_date\", \"season\")\n\ngameswithsides <- gameswithsides %>% mutate(\n  team_result = as.factor(case_when(\n    team_score > opponent_score ~ \"W\",\n    opponent_score > team_score ~ \"L\"\n  )),\nteam_offensive_rebound_factor = team_offensive_rebounds / (team_offensive_rebounds + opponent_defensive_rebounds),\nopponent_offensive_rebound_factor = opponent_offensive_rebounds / (opponent_offensive_rebounds + team_defensive_rebounds),\nteam_rolling_offensive_rebound_factor = rollmean(lag(team_offensive_rebound_factor, n=1), k=10, align=\"right\", fill=NA),\nopponent_rolling_offensive_rebound_factor = rollmean(lag(opponent_offensive_rebound_factor, n=1), k=10, align=\"right\", fill=NA\n),\nteam_defensive_rebound_factor = team_defensive_rebounds / (team_defensive_rebounds + opponent_offensive_rebounds),\nopponent_defensive_rebound_factor = opponent_defensive_rebounds / (opponent_defensive_rebounds + team_offensive_rebounds),\nteam_rolling_defensive_rebound_factor = rollmean(lag(team_defensive_rebound_factor, n=1), k=10, align=\"right\", fill=NA),\nopponent_rolling_defensive_rebound_factor = rollmean(lag(opponent_defensive_rebound_factor, n=1), k=10, align=\"right\", fill=NA\n) ) %>% \nna.omit()\n\nlevels(gameswithsides$team_result)\n\n[1] \"L\" \"W\"\n\ngameswithsides$team_result <- relevel(gameswithsides$team_result, ref=\"W\")\n\nlevels(gameswithsides$team_result)\n\n[1] \"W\" \"L\"\n\nmodelgames <- gameswithsides %>% \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_short_display_name, \n    season, \n    team_rolling_ppp, \n   # opponent_rolling_ppp, \n    team_result,\n    team_rolling_median_value,\n    opponent_rolling_median_value,\n    team_rolling_fgpct,\n    opponent_rolling_fgpct,\n    #team_cumulative_player_value,\n    team_cumulative_ppp,\n    #opponent_cumulative_player_value,\n    #opponent_cumulative_ppp,\n    team_rolling_offensive_rebound_factor,\n    opponent_rolling_offensive_rebound_factor,\n    #team_rolling_defensive_rebound_factor,\n    #opponent_rolling_defensive_rebound_factor,\n    team_rolling_fouls,\n    opponent_rolling_fouls,\n    #team_rolling_turnovers,\n    #opponent_rolling_turnovers\n    ) %>% na.omit()\n\n—– FIT —–\n\nlog_split <- initial_split(modelgames, prop = .8)\nlog_train <- training(log_split)\nlog_test <- testing(log_split)\n\n\nlog_recipe <- \n  recipe(team_result ~ ., data = log_train) %>% \n  update_role(game_id, game_date, team_short_display_name, opponent_short_display_name, season, new_role = \"ID\")\nsummary(log_recipe)\n\n# A tibble: 16 × 4\n   variable                                  type      role      source  \n   <chr>                                     <list>    <chr>     <chr>   \n 1 game_id                                   <chr [2]> ID        original\n 2 game_date                                 <chr [1]> ID        original\n 3 team_short_display_name                   <chr [3]> ID        original\n 4 opponent_short_display_name               <chr [3]> ID        original\n 5 season                                    <chr [2]> ID        original\n 6 team_rolling_ppp                          <chr [2]> predictor original\n 7 team_rolling_median_value                 <chr [2]> predictor original\n 8 opponent_rolling_median_value             <chr [2]> predictor original\n 9 team_rolling_fgpct                        <chr [2]> predictor original\n10 opponent_rolling_fgpct                    <chr [2]> predictor original\n11 team_cumulative_ppp                       <chr [2]> predictor original\n12 team_rolling_offensive_rebound_factor     <chr [2]> predictor original\n13 opponent_rolling_offensive_rebound_factor <chr [2]> predictor original\n14 team_rolling_fouls                        <chr [2]> predictor original\n15 opponent_rolling_fouls                    <chr [2]> predictor original\n16 team_result                               <chr [3]> outcome   original\n\n\n\nlightgbm_mod <- \n  boost_tree() %>% \n  set_engine(\"lightgbm\") %>% \n  set_mode(mode = \"classification\") \n\n\nlightgbm_workflow <- \n  workflow() %>% \n  add_model(lightgbm_mod) %>% \n  add_recipe(log_recipe)\n\n\nlightgbm_fit <- \n  lightgbm_workflow %>% \n  fit(data = log_train)\n\n\nlightgbmtestpredict <- lightgbm_fit %>% predict(new_data = log_test) %>%\n  bind_cols(log_test) \n\nlightgbmtestpredict <- lightgbm_fit %>% predict(new_data = log_test, type=\"prob\") %>%\n  bind_cols(lightgbmtestpredict)\n\n\nmetrics(lightgbmtestpredict, team_result, .pred_class)\n\n# A tibble: 2 × 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 accuracy binary         0.643\n2 kap      binary         0.285\n\n\n—- FUTURE FEATURE ENGINEERING —-\n\nrollingteamstats <- gameswithpossessions %>% \n  arrange(game_date) %>%\n  group_by(team_short_display_name, season) %>%\n  mutate(\n    team_rolling_ppp = rollmean(points_per_100, k=5, align=\"right\", fill=NA),\n    team_rolling_median_value = rollmean(team_player_median_value, k=5, align=\"right\", fill=NA),\n    team_rolling_fgpct = rollmean(field_goal_pct, k=5, align=\"right\", fill=NA),\n    team_cumulative_ppp = cummean(points_per_100),\n    team_rolling_fouls = rollmean(fouls, k=5, align=\"right\", fill=NA),\n    team_rolling_turnovers = rollmean(turnovers, k=5, align=\"right\", fill=NA),\n    #team_cumulative_player_value = cummean(team_median_player_value),\n    #team_rolling_offensive_rebound_factor = rollmean(lag(team_offensive_rebound_factor, n=1), k=5, align=\"right\", fill=NA)\n    ) %>% \nungroup()\n\nteam_side <- rollingteamstats %>%\n  select(\n    game_id,\n    team_id, \n    team_short_display_name, \n    opponent_team_id, \n    game_date, \n    season, \n    team_score, \n    team_rolling_ppp,\n    team_rolling_median_value,\n    team_rolling_fgpct,\n    #team_cumulative_player_value,\n    team_cumulative_ppp,\n    offensive_rebounds,\n    defensive_rebounds,\n    team_rolling_fouls\n    ) %>% \n  rename(\n    team_offensive_rebounds = offensive_rebounds,\n    team_defensive_rebounds = defensive_rebounds\n  ) %>% \n  na.omit() \n\nopponent_side <- team_side %>%\n  select(-opponent_team_id) %>% \n  rename(\n    opponent_team_id = team_id,\n    opponent_short_display_name = team_short_display_name,\n    opponent_score = team_score,\n    opponent_rolling_ppp = team_rolling_ppp,\n    opponent_rolling_median_value = team_rolling_median_value,\n    opponent_rolling_fgpct = team_rolling_fgpct,\n    #opponent_cumulative_player_value = team_cumulative_player_value,\n    opponent_cumulative_ppp = team_cumulative_ppp,\n    opponent_offensive_rebounds = team_offensive_rebounds,\n    opponent_defensive_rebounds = team_defensive_rebounds,\n    opponent_rolling_fouls = team_rolling_fouls\n  ) \n\ngameswithsides <- team_side %>% inner_join(opponent_side)\n\nJoining, by = c(\"game_id\", \"opponent_team_id\", \"game_date\", \"season\")\n\ngameswithsides <- gameswithsides %>% mutate(\n  team_result = as.factor(case_when(\n    team_score > opponent_score ~ \"W\",\n    opponent_score > team_score ~ \"L\"\n  )),\nteam_offensive_rebound_factor = team_offensive_rebounds / (team_offensive_rebounds + opponent_defensive_rebounds),\nopponent_offensive_rebound_factor = opponent_offensive_rebounds / (opponent_offensive_rebounds + team_defensive_rebounds),\nteam_rolling_offensive_rebound_factor = rollmean(team_offensive_rebound_factor, k=10, align=\"right\", fill=NA),\nopponent_rolling_offensive_rebound_factor = rollmean(opponent_offensive_rebound_factor, k=10, align=\"right\", fill=NA\n),\nteam_defensive_rebound_factor = team_defensive_rebounds / (team_defensive_rebounds + opponent_offensive_rebounds),\nopponent_defensive_rebound_factor = opponent_defensive_rebounds / (opponent_defensive_rebounds + team_offensive_rebounds),\nteam_rolling_defensive_rebound_factor = rollmean(team_defensive_rebound_factor, k=10, align=\"right\", fill=NA),\nopponent_rolling_defensive_rebound_factor = rollmean(opponent_defensive_rebound_factor, k=10, align=\"right\", fill=NA\n) ) %>% \nna.omit()\n\nlevels(gameswithsides$team_result)\n\n[1] \"L\" \"W\"\n\ngameswithsides$team_result <- relevel(gameswithsides$team_result, ref=\"W\")\n\nlevels(gameswithsides$team_result)\n\n[1] \"W\" \"L\"\n\nmodelgames <- gameswithsides %>% \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_short_display_name, \n    season, \n    team_rolling_ppp, \n    #opponent_rolling_ppp, \n    team_result,\n    team_rolling_median_value,\n    opponent_rolling_median_value,\n    team_rolling_fgpct,\n    opponent_rolling_fgpct,\n    #team_cumulative_player_value,\n    team_cumulative_ppp,\n    #opponent_cumulative_player_value,\n    #opponent_cumulative_ppp,\n    team_rolling_offensive_rebound_factor,\n    opponent_rolling_offensive_rebound_factor,\n    #team_rolling_defensive_rebound_factor,\n    #opponent_rolling_defensive_rebound_factor,\n    team_rolling_fouls,\n    opponent_rolling_fouls\n    ) %>% na.omit()\n\n—– PREDICTIONS —–\n\nplayingames <- tibble(\n  team_short_display_name=\"Texas A&M-CC\",\n  opponent_short_display_name=\"SE Missouri St\"\n) %>% add_row(\n  team_short_display_name=\"Texas Southern\",\n  opponent_short_display_name=\"Fair Dickinson\"\n) %>% add_row(\n  team_short_display_name=\"Mississippi St\",\n  opponent_short_display_name=\"Pitt\"\n) %>% add_row(\n  team_short_display_name=\"Arizona St\",\n  opponent_short_display_name=\"Nevada\"\n) \n\n\nplayingames <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(playingames)\n\nJoining, by = \"team_short_display_name\"\n\nplayingames <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(playingames) \n\nJoining, by = \"opponent_short_display_name\"\n\n\n\nplayin <- lightgbm_fit %>% \n  predict(new_data = playingames) %>%\n  bind_cols(playingames) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nplayin <- lightgbm_fit %>% \n  predict(new_data = playingames, type=\"prob\") %>%\n  bind_cols(playin) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nplayin\n\n# A tibble: 4 × 18\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ oppon…⁶\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <dbl>\n1 L             0.450   0.550 Texas Sou… Fair D…       5    46.7   0.310    19.6\n2 W             0.656   0.344 Arizona St Nevada        7    41.9   0.308    15.4\n3 L             0.373   0.627 Mississip… Pitt          6    47.3   0.303    17.2\n4 W             0.732   0.268 Texas A&M… SE Mis…       6    42.7   0.315    19.8\n# … with 9 more variables: game_id <int>, game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_rolling_median_value <dbl>,\n#   team_rolling_fgpct <dbl>, team_cumulative_ppp <dbl>,\n#   team_rolling_offensive_rebound_factor <dbl>, team_rolling_fouls <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_median_value,\n#   ⁴​opponent_rolling_fgpct, ⁵​opponent_rolling_offensive_rebound_factor, …\n\n\n\nsouthround1games <- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"Texas A&M-CC\"\n) %>% add_row(\n  team_short_display_name=\"Maryland\",\n  opponent_short_display_name=\"West Virginia\"\n) %>% add_row(\n  team_short_display_name=\"San Diego St\",\n  opponent_short_display_name=\"Charleston\"\n) %>% add_row(\n  team_short_display_name=\"Virginia\",\n  opponent_short_display_name=\"Furman\"\n) %>% add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_short_display_name=\"NC State\"\n) %>% add_row(\n  team_short_display_name=\"Baylor\",\n  opponent_short_display_name=\"UCSB\"\n) %>% add_row(\n  team_short_display_name=\"Missouri\",\n  opponent_short_display_name=\"Utah State\"\n) %>% add_row(\n  team_short_display_name=\"Arizona\",\n  opponent_short_display_name=\"Princeton\"\n)\n\n\nsouthround1games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(southround1games)\n\nJoining, by = \"team_short_display_name\"\n\nsouthround1games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(southround1games) \n\nJoining, by = \"opponent_short_display_name\"\n\n\n\nsouthround1 <- lightgbm_fit %>% \n  predict(new_data = southround1games) %>%\n  bind_cols(southround1games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround1 <- lightgbm_fit %>% \n  predict(new_data = southround1games, type=\"prob\") %>%\n  bind_cols(southround1) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround1\n\n# A tibble: 8 × 18\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ oppon…⁶\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <dbl>\n1 W             0.729   0.271 San Diego… Charle…       6    41.5   0.321    15.4\n2 L             0.477   0.523 Virginia   Furman        7    47.3   0.252    17.4\n3 L             0.480   0.520 Creighton  NC Sta…       8    47.0   0.289    17.4\n4 W             0.888   0.112 Arizona    Prince…       5    42.2   0.336    17  \n5 W             0.746   0.254 Alabama    Texas …       5    47.4   0.318    18.4\n6 W             0.574   0.426 Baylor     UCSB          6    50.5   0.291    19  \n7 W             0.753   0.247 Missouri   Utah S…       7    49.0   0.303    20.6\n8 W             0.610   0.390 Maryland   West V…       6    45.2   0.264    15  \n# … with 9 more variables: game_id <int>, game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_rolling_median_value <dbl>,\n#   team_rolling_fgpct <dbl>, team_cumulative_ppp <dbl>,\n#   team_rolling_offensive_rebound_factor <dbl>, team_rolling_fouls <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_median_value,\n#   ⁴​opponent_rolling_fgpct, ⁵​opponent_rolling_offensive_rebound_factor, …\n\n\n\n\nsouthround2games <- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"Maryland\"\n) %>% add_row(\n  team_short_display_name=\"San Diego St\",\n  opponent_short_display_name=\"Virginia\"\n) %>% add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_short_display_name=\"Baylor\"\n) %>% add_row(\n  team_short_display_name=\"Missouri\",\n  opponent_short_display_name=\"Arizona\"\n) \n\n\nsouthround2games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(southround2games)\n\nJoining, by = \"team_short_display_name\"\n\nsouthround2games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(southround2games) \n\nJoining, by = \"opponent_short_display_name\"\n\n\n\nsouthround2 <- lightgbm_fit %>% \n  predict(new_data = southround2games) %>%\n  bind_cols(southround2games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround2 <- lightgbm_fit %>% \n  predict(new_data = southround2games, type=\"prob\") %>%\n  bind_cols(southround2) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround2\n\n# A tibble: 4 × 18\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ oppon…⁶\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <dbl>\n1 W             0.591   0.409 Missouri   Arizona       8    51.7   0.307    17.8\n2 W             0.538   0.462 Creighton  Baylor        8    42.5   0.305    17.4\n3 W             0.763   0.237 Alabama    Maryla…       6    43.7   0.331    14.4\n4 L             0.453   0.547 San Diego… Virgin…       7    46.2   0.273    15.2\n# … with 9 more variables: game_id <int>, game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_rolling_median_value <dbl>,\n#   team_rolling_fgpct <dbl>, team_cumulative_ppp <dbl>,\n#   team_rolling_offensive_rebound_factor <dbl>, team_rolling_fouls <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_median_value,\n#   ⁴​opponent_rolling_fgpct, ⁵​opponent_rolling_offensive_rebound_factor, …\n\n\n\n\nsouthround3games <- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"Virginia\"\n) %>% add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_short_display_name=\"Missouri\"\n) \n\n\nsouthround3games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(southround3games)\n\nJoining, by = \"team_short_display_name\"\n\nsouthround3games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(southround3games) \n\nJoining, by = \"opponent_short_display_name\"\n\n\n\nsouthround3 <- lightgbm_fit %>% \n  predict(new_data = southround3games) %>%\n  bind_cols(southround3games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround3 <- lightgbm_fit %>% \n  predict(new_data = southround3games, type=\"prob\") %>%\n  bind_cols(southround3) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround3\n\n# A tibble: 2 × 18\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ oppon…⁶\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <dbl>\n1 W             0.595   0.405 Creighton  Missou…       6    49.1   0.273    16.4\n2 W             0.598   0.402 Alabama    Virgin…       7    46.2   0.273    15.2\n# … with 9 more variables: game_id <int>, game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_rolling_median_value <dbl>,\n#   team_rolling_fgpct <dbl>, team_cumulative_ppp <dbl>,\n#   team_rolling_offensive_rebound_factor <dbl>, team_rolling_fouls <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_median_value,\n#   ⁴​opponent_rolling_fgpct, ⁵​opponent_rolling_offensive_rebound_factor, …\n\n\n\n\nsouthround4games <- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"Creighton\"\n) \n\n\nsouthround4games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(southround4games)\n\nJoining, by = \"team_short_display_name\"\n\nsouthround4games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(southround4games) \n\nJoining, by = \"opponent_short_display_name\"\n\n\n\nsouthround4 <- lightgbm_fit %>% \n  predict(new_data = southround4games) %>%\n  bind_cols(southround4games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround4 <- lightgbm_fit %>% \n  predict(new_data = southround4games, type=\"prob\") %>%\n  bind_cols(southround4) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround4\n\n# A tibble: 1 × 18\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ oppon…⁶\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <dbl>\n1 W             0.682   0.318 Alabama    Creigh…       7    46.3   0.335    13.8\n# … with 9 more variables: game_id <int>, game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_rolling_median_value <dbl>,\n#   team_rolling_fgpct <dbl>, team_cumulative_ppp <dbl>,\n#   team_rolling_offensive_rebound_factor <dbl>, team_rolling_fouls <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_median_value,\n#   ⁴​opponent_rolling_fgpct, ⁵​opponent_rolling_offensive_rebound_factor, …\n\n\n\n\neastround1games <- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_short_display_name=\"Fair Dickinson\"\n) %>% add_row(\n  team_short_display_name=\"Memphis\",\n  opponent_short_display_name=\"FAU\"\n) %>% add_row(\n  team_short_display_name=\"Duke\",\n  opponent_short_display_name=\"Oral Roberts\"\n) %>% add_row(\n  team_short_display_name=\"Tennessee\",\n  opponent_short_display_name=\"Louisiana\"\n) %>% add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_short_display_name=\"Providence\"\n) %>% add_row(\n  team_short_display_name=\"Kansas St\",\n  opponent_short_display_name=\"Montana St\"\n) %>% add_row(\n  team_short_display_name=\"Michigan St\",\n  opponent_short_display_name=\"USC\"\n) %>% add_row(\n  team_short_display_name=\"Marquette\",\n  opponent_short_display_name=\"Vermont\"\n) \n\n\neastround1games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(eastround1games)\n\nJoining, by = \"team_short_display_name\"\n\neastround1games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(eastround1games) \n\nJoining, by = \"opponent_short_display_name\"\n\n\n\neastround1 <- lightgbm_fit %>% \n  predict(new_data = eastround1games) %>%\n  bind_cols(eastround1games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround1 <- lightgbm_fit %>% \n  predict(new_data = eastround1games, type=\"prob\") %>%\n  bind_cols(eastround1) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\neastround1\n\n# A tibble: 8 × 18\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ oppon…⁶\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <dbl>\n1 W             0.930  0.0703 Purdue     Fair D…       5    46.7   0.310    19.6\n2 W             0.517  0.483  Memphis    FAU           6    48.4   0.242    14.2\n3 W             0.551  0.449  Tennessee  Louisi…       6    48.8   0.282    16.6\n4 W             0.723  0.277  Kansas St  Montan…       6    46.6   0.293    19.6\n5 W             0.796  0.204  Duke       Oral R…       7    44.9   0.282    13.4\n6 W             0.676  0.324  Kentucky   Provid…       7    42.9   0.255    12.8\n7 W             0.531  0.469  Michigan … USC           7    44.5   0.247    17.6\n8 W             0.578  0.422  Marquette  Vermont       7    51.3   0.278    12.2\n# … with 9 more variables: game_id <int>, game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_rolling_median_value <dbl>,\n#   team_rolling_fgpct <dbl>, team_cumulative_ppp <dbl>,\n#   team_rolling_offensive_rebound_factor <dbl>, team_rolling_fouls <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_median_value,\n#   ⁴​opponent_rolling_fgpct, ⁵​opponent_rolling_offensive_rebound_factor, …\n\n\n\n\neastround2games <- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_short_display_name=\"Memphis\"\n) %>% add_row(\n  team_short_display_name=\"Duke\",\n  opponent_short_display_name=\"Louisiana\"\n) %>% add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_short_display_name=\"Kansas St\"\n) %>% add_row(\n  team_short_display_name=\"USC\",\n  opponent_short_display_name=\"Marquette\"\n)\n\n\neastround2games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(eastround2games)\n\nJoining, by = \"team_short_display_name\"\n\neastround2games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(eastround2games) \n\nJoining, by = \"opponent_short_display_name\"\n\n\n\neastround2 <- lightgbm_fit %>% \n  predict(new_data = eastround2games) %>%\n  bind_cols(eastround2games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround2 <- lightgbm_fit %>% \n  predict(new_data = eastround2games, type=\"prob\") %>%\n  bind_cols(eastround2) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\neastround2\n\n# A tibble: 4 × 18\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ oppon…⁶\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <dbl>\n1 W             0.739   0.261 Kentucky   Kansas…       6    47.8   0.251    17.6\n2 W             0.784   0.216 Duke       Louisi…       6    48.8   0.282    16.6\n3 L             0.466   0.534 USC        Marque…       8    45.6   0.265    17.8\n4 W             0.601   0.399 Purdue     Memphis       7    46.2   0.276    17.6\n# … with 9 more variables: game_id <int>, game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_rolling_median_value <dbl>,\n#   team_rolling_fgpct <dbl>, team_cumulative_ppp <dbl>,\n#   team_rolling_offensive_rebound_factor <dbl>, team_rolling_fouls <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_median_value,\n#   ⁴​opponent_rolling_fgpct, ⁵​opponent_rolling_offensive_rebound_factor, …\n\n\n\neastround3games <- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_short_display_name=\"Duke\"\n) %>% add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_short_display_name=\"Marquette\"\n)\n\n\neastround3games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(eastround3games)\n\nJoining, by = \"team_short_display_name\"\n\neastround3games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(eastround3games) \n\nJoining, by = \"opponent_short_display_name\"\n\n\n\neastround3 <- lightgbm_fit %>% \n  predict(new_data = eastround3games) %>%\n  bind_cols(eastround3games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround3 <- lightgbm_fit %>% \n  predict(new_data = eastround3games, type=\"prob\") %>%\n  bind_cols(eastround3) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\neastround3\n\n# A tibble: 2 × 18\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ oppon…⁶\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <dbl>\n1 L             0.415   0.585 Purdue     Duke          9    47.8   0.254    14.8\n2 W             0.551   0.449 Kentucky   Marque…       8    45.6   0.265    17.8\n# … with 9 more variables: game_id <int>, game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_rolling_median_value <dbl>,\n#   team_rolling_fgpct <dbl>, team_cumulative_ppp <dbl>,\n#   team_rolling_offensive_rebound_factor <dbl>, team_rolling_fouls <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_median_value,\n#   ⁴​opponent_rolling_fgpct, ⁵​opponent_rolling_offensive_rebound_factor, …\n\n\n\n\neastround4games <- tibble(\n  team_short_display_name=\"Duke\",\n  opponent_short_display_name=\"Marquette\"\n)\n\n\neastround4games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(eastround4games)\n\nJoining, by = \"team_short_display_name\"\n\neastround4games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(eastround4games) \n\nJoining, by = \"opponent_short_display_name\"\n\n\n\neastround4 <- lightgbm_fit %>% \n  predict(new_data = eastround4games) %>%\n  bind_cols(eastround4games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround4 <- lightgbm_fit %>% \n  predict(new_data = eastround4games, type=\"prob\") %>%\n  bind_cols(eastround4) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\neastround4\n\n# A tibble: 1 × 18\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ oppon…⁶\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <dbl>\n1 W             0.667   0.333 Duke       Marque…       8    45.6   0.265    17.8\n# … with 9 more variables: game_id <int>, game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_rolling_median_value <dbl>,\n#   team_rolling_fgpct <dbl>, team_cumulative_ppp <dbl>,\n#   team_rolling_offensive_rebound_factor <dbl>, team_rolling_fouls <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_median_value,\n#   ⁴​opponent_rolling_fgpct, ⁵​opponent_rolling_offensive_rebound_factor, …\n\n\n\n\nmidwestround1games <- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"N Kentucky\"\n) %>% add_row(\n  team_short_display_name=\"Iowa\",\n  opponent_short_display_name=\"Auburn\"\n) %>% add_row(\n  team_short_display_name=\"Miami\",\n  opponent_short_display_name=\"Drake\"\n) %>% add_row(\n  team_short_display_name=\"Indiana\",\n  opponent_short_display_name=\"Kent State\"\n) %>% add_row(\n  team_short_display_name=\"Iowa State\",\n  opponent_short_display_name=\"Mississippi St\"\n) %>% add_row(\n  team_short_display_name=\"Xavier\",\n  opponent_short_display_name=\"Kennesaw St\"\n) %>% add_row(\n  team_short_display_name=\"Texas A&M\",\n  opponent_short_display_name=\"Penn State\"\n) %>% add_row(\n  team_short_display_name=\"Texas\",\n  opponent_short_display_name=\"Colgate\"\n)\n\n\nmidwestround1games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(midwestround1games)\n\nJoining, by = \"team_short_display_name\"\n\nmidwestround1games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(midwestround1games) \n\nJoining, by = \"opponent_short_display_name\"\n\n\n\nmidwestround1 <- lightgbm_fit %>% \n  predict(new_data = midwestround1games) %>%\n  bind_cols(midwestround1games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround1 <- lightgbm_fit %>% \n  predict(new_data = midwestround1games, type=\"prob\") %>%\n  bind_cols(midwestround1) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround1\n\n# A tibble: 8 × 18\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ oppon…⁶\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <dbl>\n1 W             0.699   0.301 Iowa       Auburn        6    45.2   0.245    20  \n2 L             0.403   0.597 Texas      Colgate       7    53.2   0.221    11.4\n3 W             0.746   0.254 Miami      Drake         6    48.8   0.255    14.2\n4 W             0.718   0.282 Xavier     Kennes…       6    47.5   0.260    14  \n5 L             0.447   0.553 Indiana    Kent S…       7    49.3   0.253    19  \n6 W             0.595   0.405 Iowa State Missis…       7    42.0   0.303    15.6\n7 W             0.807   0.193 Houston    N Kent…       6    45.1   0.320    16.8\n8 W             0.608   0.392 Texas A&M  Penn S…       6    44.9   0.278    17.8\n# … with 9 more variables: game_id <int>, game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_rolling_median_value <dbl>,\n#   team_rolling_fgpct <dbl>, team_cumulative_ppp <dbl>,\n#   team_rolling_offensive_rebound_factor <dbl>, team_rolling_fouls <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_median_value,\n#   ⁴​opponent_rolling_fgpct, ⁵​opponent_rolling_offensive_rebound_factor, …\n\n\n\n\nmidwestround2games <- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"Iowa\"\n) %>% add_row(\n  team_short_display_name=\"Miami\",\n  opponent_short_display_name=\"Indiana\"\n) %>% add_row(\n  team_short_display_name=\"Iowa State\",\n  opponent_short_display_name=\"Xavier\"\n) %>% add_row(\n  team_short_display_name=\"Texas A&M\",\n  opponent_short_display_name=\"Colgate\"\n)\n\n\nmidwestround2games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(midwestround2games)\n\nJoining, by = \"team_short_display_name\"\n\nmidwestround2games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(midwestround2games) \n\nJoining, by = \"opponent_short_display_name\"\n\n\n\nmidwestround2 <- lightgbm_fit %>% \n  predict(new_data = midwestround2games) %>%\n  bind_cols(midwestround2games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround2 <- lightgbm_fit %>% \n  predict(new_data = midwestround2games, type=\"prob\") %>%\n  bind_cols(midwestround2) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround2\n\n# A tibble: 4 × 18\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ oppon…⁶\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <dbl>\n1 L             0.382   0.618 Texas A&M  Colgate       7    53.2   0.221    11.4\n2 W             0.769   0.231 Miami      Indiana       6    47.8   0.289    18.8\n3 W             0.811   0.189 Houston    Iowa          7    44.3   0.308    16.6\n4 L             0.386   0.614 Iowa State Xavier        8    48.0   0.276    15.6\n# … with 9 more variables: game_id <int>, game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_rolling_median_value <dbl>,\n#   team_rolling_fgpct <dbl>, team_cumulative_ppp <dbl>,\n#   team_rolling_offensive_rebound_factor <dbl>, team_rolling_fouls <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_median_value,\n#   ⁴​opponent_rolling_fgpct, ⁵​opponent_rolling_offensive_rebound_factor, …\n\n\n\n\nmidwestround3games <- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"Miami\"\n) %>% add_row(\n  team_short_display_name=\"Xavier\",\n  opponent_short_display_name=\"Texas A&M\"\n) \n\n\nmidwestround3games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(midwestround3games)\n\nJoining, by = \"team_short_display_name\"\n\nmidwestround3games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(midwestround3games) \n\nJoining, by = \"opponent_short_display_name\"\n\n\n\nmidwestround3 <- lightgbm_fit %>% \n  predict(new_data = midwestround3games) %>%\n  bind_cols(midwestround3games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround3 <- lightgbm_fit %>% \n  predict(new_data = midwestround3games, type=\"prob\") %>%\n  bind_cols(midwestround3) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround3\n\n# A tibble: 2 × 18\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ oppon…⁶\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <dbl>\n1 W             0.698   0.302 Houston    Miami         8    48.0   0.309    14.6\n2 W             0.849   0.151 Xavier     Texas …       6    40.7   0.307    15.4\n# … with 9 more variables: game_id <int>, game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_rolling_median_value <dbl>,\n#   team_rolling_fgpct <dbl>, team_cumulative_ppp <dbl>,\n#   team_rolling_offensive_rebound_factor <dbl>, team_rolling_fouls <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_median_value,\n#   ⁴​opponent_rolling_fgpct, ⁵​opponent_rolling_offensive_rebound_factor, …\n\n\n\n\nmidwestround4games <- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"Xavier\"\n) \n\n\nmidwestround4games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(midwestround4games)\n\nJoining, by = \"team_short_display_name\"\n\nmidwestround4games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(midwestround4games) \n\nJoining, by = \"opponent_short_display_name\"\n\n\n\nmidwestround4 <- lightgbm_fit %>% \n  predict(new_data = midwestround4games) %>%\n  bind_cols(midwestround4games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround4 <- lightgbm_fit %>% \n  predict(new_data = midwestround4games, type=\"prob\") %>%\n  bind_cols(midwestround4) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround4\n\n# A tibble: 1 × 18\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ oppon…⁶\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <dbl>\n1 L             0.436   0.564 Houston    Xavier        8    48.0   0.276    15.6\n# … with 9 more variables: game_id <int>, game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_rolling_median_value <dbl>,\n#   team_rolling_fgpct <dbl>, team_cumulative_ppp <dbl>,\n#   team_rolling_offensive_rebound_factor <dbl>, team_rolling_fouls <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_median_value,\n#   ⁴​opponent_rolling_fgpct, ⁵​opponent_rolling_offensive_rebound_factor, …\n\n\n\n\nwestround1games <- tibble(\n  team_short_display_name=\"Kansas\",\n  opponent_short_display_name=\"Howard\"\n) %>% add_row(\n  team_short_display_name=\"Arkansas\",\n  opponent_short_display_name=\"Illinois\"\n) %>% add_row(\n  team_short_display_name=\"Saint Mary's\",\n  opponent_short_display_name=\"VCU\"\n) %>% add_row(\n  team_short_display_name=\"UConn\",\n  opponent_short_display_name=\"Iona\"\n) %>% add_row(\n  team_short_display_name=\"TCU\",\n  opponent_short_display_name=\"Nevada\"\n) %>% add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_short_display_name=\"Grand Canyon\"\n) %>% add_row(\n  team_short_display_name=\"Northwestern\",\n  opponent_short_display_name=\"Boise St\"\n) %>% add_row(\n  team_short_display_name=\"UCLA\",\n  opponent_short_display_name=\"UNC Asheville\"\n) \n\n\nwestround1games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(westround1games)\n\nJoining, by = \"team_short_display_name\"\n\nwestround1games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(westround1games) \n\nJoining, by = \"opponent_short_display_name\"\n\n\n\nwestround1 <- lightgbm_fit %>% \n  predict(new_data = westround1games) %>%\n  bind_cols(westround1games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround1 <- lightgbm_fit %>% \n  predict(new_data = westround1games, type=\"prob\") %>%\n  bind_cols(westround1) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nwestround1\n\n# A tibble: 8 × 18\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ oppon…⁶\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <dbl>\n1 W             0.614   0.386 Northwest… Boise …       6    44.4   0.270    16  \n2 W             0.896   0.104 Gonzaga    Grand …       7    52.9   0.288    19.8\n3 W             0.638   0.362 Kansas     Howard        5    48.2   0.291    18.4\n4 W             0.639   0.361 Arkansas   Illino…       6    43.0   0.292    18.4\n5 W             0.564   0.436 UConn      Iona          7    46.2   0.262    13  \n6 W             0.720   0.280 TCU        Nevada        7    41.9   0.308    15.4\n7 W             0.612   0.388 UCLA       UNC As…       7    47.4   0.319    11.4\n8 W             0.836   0.164 Saint Mar… VCU           6    50.8   0.327    18.2\n# … with 9 more variables: game_id <int>, game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_rolling_median_value <dbl>,\n#   team_rolling_fgpct <dbl>, team_cumulative_ppp <dbl>,\n#   team_rolling_offensive_rebound_factor <dbl>, team_rolling_fouls <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_median_value,\n#   ⁴​opponent_rolling_fgpct, ⁵​opponent_rolling_offensive_rebound_factor, …\n\n\n\n\nwestround2games <- tibble(\n  team_short_display_name=\"Kansas\",\n  opponent_short_display_name=\"Arkansas\"\n) %>% add_row(\n  team_short_display_name=\"Saint Mary's\",\n  opponent_short_display_name=\"UConn\"\n) %>% add_row(\n  team_short_display_name=\"TCU\",\n  opponent_short_display_name=\"Gonzaga\"\n) %>% add_row(\n  team_short_display_name=\"Boise St\",\n  opponent_short_display_name=\"UNC Asheville\"\n) \n\n\nwestround2games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(westround2games)\n\nJoining, by = \"team_short_display_name\"\n\nwestround2games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(westround2games) \n\nJoining, by = \"opponent_short_display_name\"\n\n\n\nwestround2 <- lightgbm_fit %>% \n  predict(new_data = westround2games) %>%\n  bind_cols(westround2games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround2 <- lightgbm_fit %>% \n  predict(new_data = westround2games, type=\"prob\") %>%\n  bind_cols(westround2) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nwestround2\n\n# A tibble: 4 × 18\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ oppon…⁶\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <dbl>\n1 W             0.729   0.271 Kansas     Arkans…       7    42.1   0.333    22.2\n2 L             0.152   0.848 TCU        Gonzaga       9    55.1   0.253    14.6\n3 W             0.790   0.210 Saint Mar… UConn         7    48.6   0.336    16.2\n4 W             0.753   0.247 Boise St   UNC As…       7    47.4   0.319    11.4\n# … with 9 more variables: game_id <int>, game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_rolling_median_value <dbl>,\n#   team_rolling_fgpct <dbl>, team_cumulative_ppp <dbl>,\n#   team_rolling_offensive_rebound_factor <dbl>, team_rolling_fouls <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_median_value,\n#   ⁴​opponent_rolling_fgpct, ⁵​opponent_rolling_offensive_rebound_factor, …\n\n\n\n\nwestround3games <- tibble(\n  team_short_display_name=\"Kansas\",\n  opponent_short_display_name=\"Saint Mary's\"\n) %>% add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_short_display_name=\"Boise St\"\n) \n\n\nwestround3games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(westround3games)\n\nJoining, by = \"team_short_display_name\"\n\nwestround3games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(westround3games) \n\nJoining, by = \"opponent_short_display_name\"\n\n\n\nwestround3 <- lightgbm_fit %>% \n  predict(new_data = westround3games) %>%\n  bind_cols(westround3games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround3 <- lightgbm_fit %>% \n  predict(new_data = westround3games, type=\"prob\") %>%\n  bind_cols(westround3) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nwestround3\n\n# A tibble: 2 × 18\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ oppon…⁶\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <dbl>\n1 W             0.898   0.102 Gonzaga    Boise …       6    44.4   0.270    16  \n2 W             0.501   0.499 Kansas     Saint …       7    46.3   0.268    17.2\n# … with 9 more variables: game_id <int>, game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_rolling_median_value <dbl>,\n#   team_rolling_fgpct <dbl>, team_cumulative_ppp <dbl>,\n#   team_rolling_offensive_rebound_factor <dbl>, team_rolling_fouls <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_median_value,\n#   ⁴​opponent_rolling_fgpct, ⁵​opponent_rolling_offensive_rebound_factor, …\n\n\n\n\nwestround4games <- tibble(\n  team_short_display_name=\"Kansas\",\n  opponent_short_display_name=\"Gonzaga\"\n) \n\n\nwestround4games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(westround4games)\n\nJoining, by = \"team_short_display_name\"\n\nwestround4games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(westround4games) \n\nJoining, by = \"opponent_short_display_name\"\n\n\n\nwestround4 <- lightgbm_fit %>% \n  predict(new_data = westround4games) %>%\n  bind_cols(westround4games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround4 <- lightgbm_fit %>% \n  predict(new_data = westround4games, type=\"prob\") %>%\n  bind_cols(westround4) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nwestround4\n\n# A tibble: 1 × 18\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ oppon…⁶\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <dbl>\n1 L             0.222   0.778 Kansas     Gonzaga       9    55.1   0.253    14.6\n# … with 9 more variables: game_id <int>, game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_rolling_median_value <dbl>,\n#   team_rolling_fgpct <dbl>, team_cumulative_ppp <dbl>,\n#   team_rolling_offensive_rebound_factor <dbl>, team_rolling_fouls <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_median_value,\n#   ⁴​opponent_rolling_fgpct, ⁵​opponent_rolling_offensive_rebound_factor, …\n\n\n\n\nfinalfourgames <- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"Marquette\"\n) %>% add_row(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"Gonzaga\"\n) \n\n\nfinalfourgames <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(finalfourgames)\n\nJoining, by = \"team_short_display_name\"\n\nfinalfourgames <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(finalfourgames) \n\nJoining, by = \"opponent_short_display_name\"\n\n\n\nfinalfour <- lightgbm_fit %>% \n  predict(new_data = finalfourgames) %>%\n  bind_cols(finalfourgames) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nfinalfour <- lightgbm_fit %>% \n  predict(new_data = finalfourgames, type=\"prob\") %>%\n  bind_cols(finalfour) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nfinalfour\n\n# A tibble: 2 × 18\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ oppon…⁶\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <dbl>\n1 L             0.253   0.747 Houston    Gonzaga       9    55.1   0.253    14.6\n2 L             0.481   0.519 Alabama    Marque…       8    45.6   0.265    17.8\n# … with 9 more variables: game_id <int>, game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_rolling_median_value <dbl>,\n#   team_rolling_fgpct <dbl>, team_cumulative_ppp <dbl>,\n#   team_rolling_offensive_rebound_factor <dbl>, team_rolling_fouls <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_median_value,\n#   ⁴​opponent_rolling_fgpct, ⁵​opponent_rolling_offensive_rebound_factor, …\n\n\n\n\nchampionshipgames <- tibble(\n  team_short_display_name=\"Marquette\",\n  opponent_short_display_name=\"Houston\"\n)\n\n\nchampionshipgames <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(championshipgames)\n\nJoining, by = \"team_short_display_name\"\n\nchampionshipgames <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(championshipgames) \n\nJoining, by = \"opponent_short_display_name\"\n\n\n\nchampionship <- lightgbm_fit %>% \n  predict(new_data = championshipgames) %>%\n  bind_cols(championshipgames) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nchampionship <- lightgbm_fit %>% \n  predict(new_data = championshipgames, type=\"prob\") %>%\n  bind_cols(championship) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nchampionship\n\n# A tibble: 1 × 18\n  .pred_class .pred_W .pred_L team_sho…¹ oppon…² oppon…³ oppon…⁴ oppon…⁵ oppon…⁶\n  <fct>         <dbl>   <dbl> <chr>      <chr>     <dbl>   <dbl>   <dbl>   <dbl>\n1 W             0.691   0.309 Marquette  Houston       7    40.8   0.279    19.4\n# … with 9 more variables: game_id <int>, game_date <date>, season <int>,\n#   team_rolling_ppp <dbl>, team_rolling_median_value <dbl>,\n#   team_rolling_fgpct <dbl>, team_cumulative_ppp <dbl>,\n#   team_rolling_offensive_rebound_factor <dbl>, team_rolling_fouls <dbl>, and\n#   abbreviated variable names ¹​team_short_display_name,\n#   ²​opponent_short_display_name, ³​opponent_rolling_median_value,\n#   ⁴​opponent_rolling_fgpct, ⁵​opponent_rolling_offensive_rebound_factor, …\n\n\nGo Marquette!!"
  }
]